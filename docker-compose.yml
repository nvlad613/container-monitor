version: '3.8'

services:
  frontend:
    build: ./frontend
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "9000:8080"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  pinger:
    build: ./pinger
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: host
    extra_hosts:
      - "nginx:127.0.0.1"
    depends_on:
      - nginx

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"

  liquibase:
    build: ./backend/cmd/liquibase
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./frontend/build:/usr/share/nginx/html
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge